openapi: 3.0.3

info:
  title: Eventor API
  description: |
    Eventor API
  version: "1.0.0"
  termsOfService: https://eventor.orientering.se/Home/About
  contact:
    name: Eventor
    url: https://eventor.orienteering.org/api/documentation

servers:
  - url: https://eventor.orientering.no/api
    description: Norwegian Eventor API
  - url: https://eventor.orientering.se/api
    description: Swedish Eventor API
  - url: https://eventor.orienteering.asn.au/api
    description: Australian Eventor API
  - url: https://eventor.orienteering.org/api
    description: International Eventor API

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: ApiKey
      in: header

security:
  - ApiKeyAuth: []

paths:
  
  /events:
    get:
      summary: Returns a list with the events matching the search parameters.
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Start time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: End time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: fromModifyDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Includes only events that have changed after this time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toModifyDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Includes only events that have changed before this time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list of event IDs. Omit to include all events.
        - in: query
          name: organisationIds
          schema:
            type: string
            example: "273,89"
          description: Comma-separated list of organisation IDs for the organising clubs. If a state's organisation ID is specified, all events organised by a club in that state will be included. Omit to include all events.
        - in: query
          name: classificationIds
          schema:
            type: string
            example: "4,5"
          description: Comma-separated list of event classification IDs, where 1=championship event, 2=national event, 3=state event, 4=local event, 5=club event. Omit to include all events.
        - in: query
          name: includeEntryBreaks
          schema:
            type: boolean
            default: false
          description: Set to `true` to include the entry deadlines of the event.
        - in: query
          name: includeAttributes
          schema:
            type: boolean
            default: false
          description: Set to `true` to include the event's event attributes.
        - in: query
          name: parentIds
          schema:
            type: string
            example: 1,2
          description: If filtering on parent events, comma-separated list of IDs for parent events.
      responses:
        "200":
          description: XML element `EventList`
          content:
            application/xml:
              schema: 
                type: string # TODO

  /events/documents:
    get:
      summary: Returns a list with documents for the events matching the search parameters.
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Start time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: End time (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list of event IDs. Omit to include all events.
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          description: Comma-separated list of organisation IDs for the organising clubs. If a state's organisation ID is specified, all events organised by a club in that state will be included. Omit to include all events.
      responses:
        "200":
          description: XML element `DocumentList`
          content:
            application/xml:
              schema:
                type: string # TODO


  /event/{eventId}:
    get:
      summary: Returns an event.
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: The ID of the event as specified by `/events`.
      responses:
        "200":
          description: XML element `Event`
          content:
            application/xml:
              schema:
                type: string # TODO

  /eventclasses:
    get:
      summary: Returns all classes in an event.
      parameters:
        - in: query
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: The ID of the event as specified by `/events`.
        - in: query
          name: includeEntryFees
          schema:
            type: boolean
            example: false
          description: Set to `true` to include IDs and application order for the entry fees of the classes.
      responses:
        "200":
          description: XML element `EventClassList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /entryfees/events/{eventId}:
    get:
      summary: Returns all entry fees in an event.
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: The ID of the event as specified by `/events`.
      responses:
        "200":
          description: XML element `EntryFeeList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /organisation/apiKey:
    get:
      summary: Returns the organisation that the specified API key belongs to.
      responses:
        "200":
          description: XML element `Organisation`
          content:
            application/xml:
              schema:
                type: string # TODO

  /organisations:
    get:
      summary: Returns a list with all organisations (federations, state associations and clubs).
      parameters:
        - in: query
          name: includeProperties
          schema:
            type: boolean
            default: false
          description: Set to `true` to include extended information about the organisations.
      responses:
        "200":
          description: XML element `OrganisationList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /organisation/{id}:
    get:
      summary: Returns an organisation (federation, state association or club).
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation.
      responses:
        "200":
          description: XML element `Organisation`
          content:
            application/xml:
              schema:
                type: string # TODO

  /persons/organisations/{organisationId}:
    get:
      summary: Returns all persons that are members of an organisation.
      parameters:
        - in: path
          name: organisationId
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation as specified by `/organisations`. This parameter must be set to the own organisation's ID.
        - in: query
          name: includeContactDetails
          schema:
            type: boolean
            default: false
          description: Set to `true` to include the members' addresses, phone numbers and email addresses.
      responses:
        "200":
          description: XML element `PersonList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /competitors:
    get:
      summary: Returns event settings (punching card numbers, pre-selected classes) for all persons that have specified these settings within an organisation.
      parameters:
        - in: query
          name: organisationId
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation as specified by `/organisations`. This parameter must be set to the own organisation's ID.
      responses:
        "200":
          description: XML element `CompetitorList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /externalLoginUrl:
    get:
      summary: Returns a link that can be used to redirect a person from an external website to logged-in mode in Eventor. The link can only be used once and is forfeited after five minutes. Useful when a club has a website solution with its own login system. **Caution!** Make sure to use this method in such a way that only authorized users in the external system will have access to the redirect link!
      parameters:
        - in: query
          name: personId
          schema:
            type: integer
            example: 1
          required: true
          description: The ID of the person as specified by `/persons/organisations/{organisationId}`. The person must be a member of the organisation specified by organisationId.
        - in: query
          name: organisationId
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation as specified by `/organisations`. This parameter must be set to the own organisation's ID.
        - in: query
          name: includeContactDetails
          schema:
            type: boolean
            default: false
          description: Set to `true` to include the members' addresses, phone numbers and email addresses.
      responses:
        "200":
          description: XML element `ExternalLoginUrl`
          content:
            application/xml:
              schema:
                type: string # TODO

  /authenticatePerson:
    get:
      summary: Returns the person matching the specified user name and password.
      parameters:
        - in: header
          name: Username
          schema:
            type: string
            example: OlaNordmann
          required: true
          description: The person's user name i Eventor.
        - in: header
          name: Password
          schema:
            type: string
            example: 0r13nt3r1n5
          required: true
          description: The person's password i Eventor.
      responses:
        "200":
          description: XML element `Person`
          content:
            application/xml:
              schema:
                type: string # TODO

  /entries:
    get:
      summary: Returns persons entered to an event as specified by the search parameters.
      parameters:
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          description: Comma-separated list with IDs as specified by `/organisations` for the organisation that entries is to be fetched for. Omit to include all organisations.
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list with event IDs as specified by `/events`. Omit to include all events.
        - in: query
          name: eventClassIds
          schema:
            type: string
            example: "2"
          description: Comma-separated list with class IDs as specified by `/eventclasses`. Omit to include all classes.
        - in: query
          name: fromEventDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Gets entries from events organised at this or later times (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toEventDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Gets entries from events organised at this or earlier times (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: fromEntryDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Gets entries that are made at this time or later (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toEntryDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Gets entries that are made at this time or earlier (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: fromModifyDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Gets entries that have changed at this time or later (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toModifyDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Gets entries that are changed at this time or earlier (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: includeEntryFees
          schema:
            type: boolean
            default: false
          description: Set to `true` to include entry fee information.
        - in: query
          name: includePersonElement
          schema:
            type: boolean
            default: false
          description: Set to `true` to include complete person information insted of just a person ID.
        - in: query
          name: includeOrganisationElement
          schema:
            type: boolean
            example: false
          description: Set to `true` to include complete organisation information insted of just an organisation ID.
        - in: query
          name: includeEventElement
          schema:
            type: boolean
            example: false
          description: Set to `true` to include complete event information insted of just an event ID.
      responses:
        "200":
          description: XML element `EntryList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /competitorcount:
    get:
      summary: Returns the number of entries as given by the search parameters.
      parameters:
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          required: true
          description: Comma-separated list with IDs as specified by `/organisations` for the organisation that entries is to be fetched for.
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list with event IDs as specified by `/events`. Omit to include all events.
        - in: query
          name: personIds
          schema:
            type: string
            example: "1"
          description: Comma-separated list with personIDs as specified by `/persons/organisations/{organisationId}`. The persons must be members in the organisation specified by organisationIds.
      responses:
        "200":
          description: XML element `CompetitorCountList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /starts/event:
    get:
      summary: Returns start times for an event.
      parameters:
        - in: query
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: Event ID as specified by `/events`.
      responses:
        "200":
          description: XML element `StartList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /starts/person:
    get:
      summary: Returns start times for a person in a number of events.
      parameters:
        - in: query
          name: personId
          schema:
            type: integer
            example: 1
          required: true
          description: Person ID as specified by `/persons/organisations/{organisationId}`.
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list with event IDs as specified by `/events`. Omit to include all events.
        - in: query
          name: fromDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Includes events organised this or later times (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Includes events organised this or earlier times (yyyy-mm-dd hh:mm:ss).
      responses:
        "200":
          description: XML element `StartListList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /starts/organisation:
    get:
      summary: Returns start times for an organisation's (club's) competitors in an event.
      parameters:
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          required: true
          description: Comma-separated list with IDs as specified by `/organisations` for the organisations that start times are to be fetched for. This parameter must be set to the own organisation's ID.
        - in: query
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: The ID of the event as specified by `/events`.
      responses:
        "200":
          description: XML element `StartList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /results/event:
    get:
      summary: Returns results for an event.
      parameters:
        - in: query
          name: eventId
          schema:
            type: integer
            example: 8248
          description: The ID of the event as specified by `/events`.
        - in: query
          name: includeSplitTimes
          schema:
            type: boolean
            example: false
          description: Set to `true` to include split times.
        - in: query
          name: top
          schema:
            type: integer
            example: 50
          description: Only returns this number of competitors from the top of the result list. Omit to include all competitors.
      responses:
        "200":
          description: XML element `ResultList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /results/person:
    get:
      summary: Returns results for a person in a number of events.
      parameters:
        - in: query
          name: personId
          schema:
            type: integer
            example: 1
          description: Person ID as specified by `/persons/organisations/{organisationId}`.
        - in: query
          name: eventIds
          schema:
            type: string
            example: 8248,15365
          description: Comma-separated list with event IDs as specified by `/events`. Omit to include all events.
        - in: query
          name: fromDate
          schema:
            type: string
            default: "0000-01-01 00:00:00"
          description: Includes events organised this or later times (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: toDate
          schema:
            type: string
            default: "9999-12-31 23:59:59"
          description: Includes events organised this or earlier times (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: includeSplitTimes
          schema:
            type: boolean
            example: false
          description: Set to `true` to include split times.
        - in: query
          name: top
          schema:
            type: integer
            example: 50
          description: Returns, besides the specified person, only this number of competitors from the top of the result list. Omit to include the specified person only.
      responses:
        "200":
          description: XML element `StartListList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /results/organisation:
    get:
      summary: Returns results for an organisation's (club's) competitors in an event.
      parameters:
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          required: true
          description: Comma-separated list with IDs as specified by `/organisations` for the organisations that start times are to be fetched for. This parameter must be set to the own organisation's ID.
        - in: query
          name: eventId
          schema:
            type: integer
            example: 8248
          required: true
          description: The ID of the event as specified by `/events`.
        - in: query
          name: includeSplitTimes
          schema:
            type: boolean
            example: false
          description: Set to `true` to include split times.
        - in: query
          name: top
          schema:
            type: integer
            example: 50
          description: Returns, besides the specified organisation's competitors, only this number of competitors from the top of each class' result list. Omit to include the specified organisation's comeptitors only.
      responses:
        "200":
          description: XML element `ResultList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /activities:
    get:
      summary: Returns all activities for an organisation (club) in a given period of time.
      parameters:
        - in: query
          name: organisationId
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation as specified by `/organisations`. This parameter must be set to the own organisation's ID.
        - in: query
          name: from
          schema:
            type: string
            example: "1000-01-01 00:00:00"
          required: true
          description: The start of the time period (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: to
          schema:
            type: string
            example: "9999-12-31 23:59:59"
          required: true
          description: The end of the time period (yyyy-mm-dd hh:mm:ss).
        - in: query
          name: includeRegistrations
          schema:
            type: boolean
            default: false
          description: Set to `true` to include registrastions for the activities.
      responses:
        "200":
          description: XML element `ActivityList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /activity:
    get:
      summary: Returns an activity.
      parameters:
        - in: query
          name: organisationId
          schema:
            type: integer
            example: 273
          required: true
          description: The ID of the organisation as specified by `/organisations`. This parameter must be set to the own organisation's ID.
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          required: true
          description: The ID of the activity as specified by by `/activities`.
        - in: query
          name: includeRegistrations
          schema:
            type: boolean
            default: false
          description: Set to `true` to include registrastions for the activities.
      responses:
        "200":
          description: XML element `Activity`
          content:
            application/xml:
              schema:
                type: string # TODO

  /competitor/{personId}:
    get:
      summary: Returns a person's event settings (e.g. pre-selected classes and punching card numbers).
      parameters:
        - in: path
          name: personId
          schema:
            type: integer
            example: 1
          required: true
          description: The ID of the person as specified by `/persons/organisations/{organisationId}`. The person must be a member of the organisation whose API key is used.
      responses:
        "200":
          description: XML element `Competitor`
          content:
            application/xml:
              schema:
                type: string # TODO


  /competitor:
    put:
      summary: Saves a person's event settings (e.g. pre-selected classes and punching card numbers).
      requestBody:
        description: The event settings for the person specified as a `Competitor` object. The person must be a member of the organisation whose API key is used.
        required: true
        content:
          application/xml:
            schema:
              type: string # TODO
      responses:
        "200":
          description: XML element `Competitor`
          content:
            application/xml:
              schema:
                type: string # TODO
              example: |
                <Competitor>
                  <Person sex="F">
                    <Id>1</Id>
                    <Name>
                      <Family>Schneider</Family>
                      <Given>Stefanie</Given>
                    </Name>
                    <BirthDate>1986-11-12</BirthDate>
                    <Nationality code="GER">Germany</Nationality>
                  </Person>
                  <Organisation>
                    <Id>1</Id>
                    <Name>Super Fast Orienteers</Name>
                    <Country code="GBR">Great Britain</Country>
                  </Organisation>
                  <Organisation>
                    <Id>2</Id>
                    <Name>Bushmen OC</Name>
                    <Country code="GBR">Great Britain</Country>
                  </Organisation>
                  <ControlCard punchingSystem="SI">99999</ControlCard>
                  <ControlCard punchingSystem="Emit">88888</ControlCard>
                  <Class>
                    <Id>3</Id>
                    <Name>Men Open</Name>
                  </Class>
                </Competitor>

  /export/competitors:
    get:
      summary: Returns all persons that are members for given organisations
      parameters:
        - in: query
          name: organisationIds
          schema:
            type: string
            example: 273,89
          required: false
          description: Comma-separated list with IDs as specified by `/organisations` for the organisations that competitors are to be fetched for. Omit to include all competitors.
        - in: query
          name: version
          schema:
            type: string
            example: "3.0"
          required: false
          description: IOF XSD version, `2.0` or `3.0`
        - in: query
          name: includePreselectedClasses
          schema:
            type: boolean
            example: false
          description: Should preselected classes be included for each competitor.
        - in: query
          name: zip
          schema:
            type: boolean
            example: false
          description: Set to `true` to return a zip file of the result.
      responses:
        "200":
          description: XML element `CompetitorList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /import/startlist:
    post:
      summary: Import start list for event
      parameters: []
      requestBody:
        description: XML element `StartList`
        required: true
        content:
          application/xml:
            schema:
              type: string # TODO
      responses:
        '200':
          description: XML element `StartList`
          content:
            application/xml:
              schema:
                type: string # TODO

  /import/resultlist:
    post:
      summary: Import result list for event
      parameters: []
      responses:
        '200':
          description: XML element `ImportResultListResult`
          content:
            application/xml:
              schema:
                type: string
                example: |
                  <?xml version="1.0" encoding="utf-8"?>
                  <ImportResultListResult xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <ResultListUrl>https://eventor.orientering.no/Events/ResultList?eventId=15455&amp;groupBy=EventClass</ResultListUrl>
                    <SplitTimeListUrl>http://obasen.orientering.se/winsplits/online/no/default.asp?page=classes&amp;databaseId=76549</SplitTimeListUrl>
                  </ImportResultListResult>
      requestBody:
        description: XML element `ResultList`
        required: true
        content:
          application/xml:
            schema:
              type: string
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ResultList xmlns="http://www.orienteering.org/datastandard/3.0"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            iofVersion="3.0"
                            createTime="2021-08-21T07:46:33+01:00"
                            creator="Example Software"
                            status="Complete">
                  <!--
                    Result list for an individual event where one of the classes use multiple courses (butterfly-loop style).
                  -->
                  <Event>
                    <Id>15455</Id>
                    <Name>Liten trening</Name>
                    <StartTime>
                      <Date>2021-08-21</Date>
                      <Time>10:00:00+01:00</Time>
                    </StartTime>
                    <EndTime>
                      <Date>2021-08-21</Date>
                      <Time>14:00:00+01:00</Time>
                    </EndTime>
                  </Event>
                  <ClassResult>
                    <Class>
                      <Id>1</Id>
                      <Name>Men Elite</Name>
                    </Class>
                    <!-- if there are multiple courses per class, a Course element without any id may be included to express the properties of an average pseudo course -->
                    <Course>
                      <!-- course length is expressed in meters -->
                      <Length>4650</Length>
                      <!-- course climb is expressed in meters; omit the Climb element if the course climb is not known -->
                      <Climb>160</Climb>
                    </Course>
                    <PersonResult>
                      <Person>
                        <Id>1</Id>
                        <Name>
                          <Family>Wood</Family>
                          <Given>George</Given>
                        </Name>
                      </Person>
                      <!-- the Organisation element is to be omitted if the competitor does not represent a club -->
                      <Organisation>
                        <Id>5</Id>
                        <Name>OC Back and Forth</Name>
                        <Country code="GBR">Great Britain</Country>
                      </Organisation>
                      <Result>
                        <BibNumber>101</BibNumber>
                        <!-- start and finish times are expressed in ISO 8601 format, optionally including time zone information: YYYY-MM-DDThh:mm:ss[.s[s[s]]][((+|-)hh:mm)|Z] -->
                        <!-- for a detailed specification, see http://www.w3.org/TR/xmlschema-2/#dateTime -->
                        <StartTime>2021-08-21T15:00:00+01:00</StartTime>
                        <FinishTime>2021-08-21T15:33:21+01:00</FinishTime>
                        <!-- times are expressed in seconds, use period as decimal separator for fractions of seconds -->
                        <Time>2001</Time>
                        <!-- time behind the winner -->
                        <TimeBehind>0</TimeBehind>
                        <!-- the position in the result list -->
                        <Position>1</Position>
                        <!-- the result status, see the xml schema file for all status codes -->
                        <Status>OK</Status>
                        <!-- the Course element may be used on person result level when not all competitors in the class have been assigned the same course, e.g. when butterfly loops are used -->
                        <Course>
                          <Id>1</Id>
                          <Name>Men Elite-1</Name>
                          <Length>4650</Length>
                          <Climb>160</Climb>
                        </Course>
                        <!-- split times may be omitted, but if they are present all controls of the course that is assigned to the competitor must be included in the correct order, even if they have not been visited -->
                        <!-- start and finish punches must not be included; use StartTime and FinishTime of the Result element instead -->
                        <SplitTime>
                          <ControlCode>31</ControlCode>
                          <!-- if the control has been visited but the time is not known (e.g. due to a failing punching unit), omit the Time element -->
                          <Time>501</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>32</ControlCode>
                          <Time>720</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>31</ControlCode>
                          <Time>818</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>33</ControlCode>
                          <Time>1136</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>31</ControlCode>
                          <Time>1593</Time>
                        </SplitTime>
                        <ControlCard>794021</ControlCard>
                        <!-- ordered services and fees related to these; for example rental card fee -->
                        <!-- this competitor has requested a rental card -->
                        <ServiceRequest>
                          <Service>
                            <Id>1</Id>
                            <Name>Rental card</Name>
                          </Service>
                          <RequestedQuantity>1</RequestedQuantity>
                          <AssignedFee>
                            <Fee>
                              <Id>783</Id>
                              <Name>Rental card fee</Name>
                              <Amount currency="EUR">2</Amount>
                            </Fee>
                          </AssignedFee>
                        </ServiceRequest>
                      </Result>
                    </PersonResult>
                    <!-- example of a competitor that has mispunched, in this case running butterfly loops in the wrong order (the course's control code sequence is S-31-33-31-32-31-F, but the competitor punched S-31-32-31-33-31-F) -->
                    <PersonResult>
                      <Person>
                        <Id>2</Id>
                        <Name>
                          <Family>Martin</Family>
                          <Given>Edgar</Given>
                        </Name>
                      </Person>
                      <Organisation>
                        <Id>2</Id>
                        <Name>Bushmen OC</Name>
                        <Country code="GBR">Great Britain</Country>
                      </Organisation>
                      <Result>
                        <BibNumber>102</BibNumber>
                        <StartTime>2021-08-21T15:03:00+01:00</StartTime>
                        <!-- the finish time is included even if the competitor has not completed his course -->
                        <FinishTime>2021-08-21T15:39:42+01:00</FinishTime>
                        <!-- the time is included even if the competitor has not completed his course -->
                        <Time>2202</Time>
                        <Status>MissingPunch</Status>
                        <Course>
                          <Id>2</Id>
                          <Name>Men Elite-2</Name>
                          <Length>4650</Length>
                          <Climb>160</Climb>
                        </Course>
                        <SplitTime>
                          <ControlCode>31</ControlCode>
                          <Time>693</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>33</ControlCode>
                          <Time>1581</Time>
                        </SplitTime>
                        <SplitTime>
                          <ControlCode>31</ControlCode>
                          <Time>1920</Time>
                        </SplitTime>
                        <!-- controls that have not been visited (or - as in this case - punched but not in the correct order) must still be included, but with the status attribute set to Missing -->
                        <SplitTime status="Missing">
                          <ControlCode>32</ControlCode>
                        </SplitTime>
                        <SplitTime status="Missing">
                          <ControlCode>31</ControlCode>
                        </SplitTime>
                        <!-- additional punches that do not belong to the course or are not in the correct order may be expressed using the Additional status -->
                        <SplitTime status="Additional">
                          <ControlCode>32</ControlCode>
                          <Time>966</Time>
                        </SplitTime>
                        <SplitTime status="Additional">
                          <ControlCode>31</ControlCode>
                          <Time>1379</Time>
                        </SplitTime>
                        <ControlCard>299482</ControlCard>
                      </Result>
                    </PersonResult>
                  </ClassResult>
                  <ClassResult>
                    <Class>
                      <Id>2</Id>
                      <Name>Open</Name>
                    </Class>
                    <Course>
                      <Id>3</Id>
                      <Name>Open</Name>
                      <Length>2990</Length>
                      <Climb>120</Climb>
                    </Course>
                    <PersonResult>
                      <Person>
                        <Id>3</Id>
                        <Name>
                          <Family>Lawson</Family>
                          <Given>Toni</Given>
                        </Name>
                      </Person>
                      <Organisation>
                        <Id>6</Id>
                        <Name>Doubtful Direction</Name>
                        <Country code="GBR">Great Britain</Country>
                      </Organisation>
                      <Result>
                        <StartTime>2021-08-21T15:15:00+01:00</StartTime>
                        <Status>DidNotStart</Status>
                        <ControlCard>973078</ControlCard>
                      </Result>
                    </PersonResult>
                  </ClassResult>
                </ResultList>
